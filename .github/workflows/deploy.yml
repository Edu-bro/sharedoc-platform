name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci && cd ..
        cd frontend && npm ci && cd ..

    - name: Run backend tests
      run: cd backend && npm test

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Test frontend build
      run: |
        cd frontend
        # 빌드된 파일 확인
        ls -la build/
        # 기본 파일들 존재 확인
        test -f build/index.html
        test -f build/static/js/*.js
        test -f build/static/css/*.css

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/sharedoc:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/sharedoc:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          # 프로덕션 서버에서 실행할 명령어들
          cd /opt/sharedoc
          docker-compose pull
          docker-compose up -d
          
          # 헬스 체크
          sleep 30
          curl -f http://localhost:3001/api/health || exit 1
          
          echo "✅ 배포 완료!"